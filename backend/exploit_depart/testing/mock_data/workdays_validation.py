from rest_framework.exceptions import ValidationError
from testing.tests.utils.mixins import TestValidationMixin

from common.data.timesheets import choices
from common.exceptions.handlers import custom_exception_handler


def get_response_data(message_key):
    return custom_exception_handler(
        TestValidationMixin().get_val_err_exc(message_key=message_key),
        context=None,
    ).data


def get_mult_response_data(message_keys):
    return custom_exception_handler(
        TestValidationMixin().get_mult_val_err_exc(message_keys=message_keys),
        context=None,
    ).data


work_data_integrity_data = [
    {"work_started": None},
    {"work_ended": None},
    {"work_started": None, "work_ended": None},
]

launch_data_integrity_data = [{"launch_started": None}, {"launch_ended": None}]

if_weekend_filled_properly_data = [
    {"work_started": choices.default_workday_start},
    {"work_ended": choices.default_workday_end},
    {"launch_started": choices.default_launch_start},
    {"launch_ended": choices.default_launch_end},
    {
        "day_status": choices.sickday,
        "work_started": choices.default_workday_start,
    },
    {"day_status": choices.sickday, "work_ended": choices.default_workday_end},
    {
        "day_status": choices.sickday,
        "launch_started": choices.default_launch_start,
    },
    {"day_status": choices.sickday, "launch_ended": choices.default_launch_end},
    {
        "day_status": choices.vacation,
        "work_started": choices.default_workday_start,
    },
    {"day_status": choices.vacation, "work_ended": choices.default_workday_end},
    {
        "day_status": choices.vacation,
        "launch_started": choices.default_launch_start,
    },
    {
        "day_status": choices.vacation,
        "launch_ended": choices.default_launch_end,
    },
]

work_start_before_end_data = [
    {"work_started": "13:00", "work_ended": "12:00"},
    {"work_started": "12:00", "work_ended": "12:00"},
]

launch_in_work_period_data = [
    {"launch_started": "13:00", "launch_ended": "12:00"},
    {
        "work_started": "8:00",
        "work_ended": "14:00",
        "launch_started": "13:00",
        "launch_ended": "15:00",
    },
    {
        "work_started": "8:00",
        "work_ended": "14:00",
        "launch_started": "14:00",
        "launch_ended": "15:00",
    },
    {
        "work_started": "8:00",
        "work_ended": "14:00",
        "launch_started": "15:00",
        "launch_ended": "16:00",
    },
    {
        "work_started": "8:00",
        "work_ended": "14:00",
        "launch_started": "6:00",
        "launch_ended": "7:00",
    },
    {
        "work_started": "8:00",
        "work_ended": "14:00",
        "launch_started": "7:00",
        "launch_ended": "8:00",
    },
]

multiple_update_data = [
    (
        {
            "day_status": "вых.",
            "work_started": None,
            "work_ended": None,
            "launch_started": None,
            "launch_ended": None,
        },
        get_response_data(message_key="pk_list_not_found"),
    ),
    (
        {
            "pk_list": "1, 2, 3",
            "day_status": "вых.",
            "work_started": None,
            "work_ended": None,
            "launch_started": None,
            "launch_ended": None,
        },
        get_response_data(message_key="pk_list_wrong_format"),
    ),
    (
        {
            "pk_list": 1,
            "day_status": "вых.",
            "work_started": None,
            "work_ended": None,
            "launch_started": None,
            "launch_ended": None,
        },
        get_response_data(message_key="pk_list_wrong_format"),
    ),
    (
        {
            "pk_list": {},
            "day_status": "вых.",
            "work_started": None,
            "work_ended": None,
            "launch_started": None,
            "launch_ended": None,
        },
        get_response_data(message_key="pk_list_wrong_format"),
    ),
    (
        {
            "pk_list": [],
            "day_status": "вых.",
            "work_started": None,
            "work_ended": None,
            "launch_started": None,
            "launch_ended": None,
        },
        get_response_data(message_key="pk_list_is_empty"),
    ),
    (
        {
            "pk_list": [1, 2, 3],
            # "day_status": "вых.",
            "work_started": None,
            "work_ended": None,
            "launch_started": None,
            "launch_ended": None,
        },
        {
            "day_status": custom_exception_handler(
                ValidationError(detail="Обязательное поле.", code="required"),
                context=None,
            ).data
        },
    ),
    (
        {
            "pk_list": [1, 2, 3],
            "day_status": "вых.",
            # "work_started": None,
            "work_ended": None,
            "launch_started": None,
            "launch_ended": None,
        },
        get_response_data(message_key="work_started_not_filled"),
    ),
    (
        {
            "pk_list": [1, 2, 3],
            "day_status": "вых.",
            "work_started": None,
            # "work_ended": None,
            "launch_started": None,
            "launch_ended": None,
        },
        get_response_data(message_key="work_ended_not_filled"),
    ),
    (
        {
            "pk_list": [1, 2, 3],
            "day_status": "вых.",
            "work_started": None,
            "work_ended": None,
            # "launch_started": None,
            "launch_ended": None,
        },
        get_response_data(message_key="launch_started_not_filled"),
    ),
    (
        {
            "pk_list": [1, 2, 3],
            "day_status": "вых.",
            "work_started": None,
            "work_ended": None,
            "launch_started": None,
            # "launch_ended": None,
        },
        get_response_data(message_key="launch_ended_not_filled"),
    ),
    (
        {
            "pk_list": [1, 2, 3],
            "day_status": "вых.",
            # "work_started": None,
            # "work_ended": None,
            # "launch_started": None,
            # "launch_ended": None,
        },
        get_mult_response_data(
            message_keys=[
                "work_started_not_filled",
                "work_ended_not_filled",
                "launch_started_not_filled",
                "launch_ended_not_filled",
            ]
        ),
    ),
]

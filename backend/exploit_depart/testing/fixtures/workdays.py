from datetime import date

import pytest
from rest_framework.renderers import JSONRenderer

from common.data.timesheets.choices import (
    default_launch_end,
    default_launch_start,
    default_workday_end,
    default_workday_start,
    defualt_launch_duration,
    defualt_work_duration,
    shortened,
    shortened_work_duration,
    shortened_workday_end,
    weekend,
    workday,
)
from timesheets.workdays.models import WorkDay


@pytest.fixture
def valid_workday_data():
    valid_data = {
        "day_status": workday,
        "work_started": "8:30",
        "work_ended": "17:40",
        "launch_started": "12:10",
        "launch_ended": "13:20",
    }
    return valid_data


@pytest.fixture
def valid_weekend_data():
    valid_data = {
        "day_status": weekend,
        "work_started": None,
        "work_ended": None,
        "launch_started": None,
        "launch_ended": None,
    }
    return valid_data


@pytest.fixture
def default_workday_instance(employee):
    workday_obj = WorkDay(
        date=date(year=1970, month=1, day=1),
        employee=employee,
        day_status=workday,
        work_started=default_workday_start,
        work_ended=default_workday_end,
        launch_started=default_launch_start,
        launch_ended=default_launch_end,
        work_duration=defualt_work_duration,
        launch_duration=defualt_launch_duration,
    )
    return workday_obj


@pytest.fixture
def workday_saved(default_workday_instance):
    workday_obj = default_workday_instance
    workday_obj.save()
    return workday_obj


@pytest.fixture
def workday_json(valid_workday_data):
    return JSONRenderer().render(data=valid_workday_data)


@pytest.fixture
def multiple_update_workday_data(valid_workday_data):
    data = valid_workday_data.copy()
    data.update({"pk_list": []})
    return data


@pytest.fixture
def multiple_update_weekend_data(valid_weekend_data):
    data = valid_weekend_data.copy()
    data.update({"pk_list": []})
    return data


@pytest.fixture
def default_weekend_instance(employee):
    workday_obj = WorkDay(
        date=date(year=1970, month=1, day=2),
        employee=employee,
        day_status=weekend,
        work_started=None,
        work_ended=None,
        launch_started=None,
        launch_ended=None,
        work_duration=None,
        launch_duration=None,
    )
    return workday_obj


@pytest.fixture
def weekend_saved(default_weekend_instance):
    weekend_obj = default_weekend_instance
    weekend_obj.save()
    return weekend_obj


@pytest.fixture
def default_shortened_instance(employee):
    workday_obj = WorkDay(
        date=date(year=1970, month=1, day=3),
        employee=employee,
        day_status=shortened,
        work_started=default_workday_start,
        work_ended=shortened_workday_end,
        launch_started=default_launch_start,
        launch_ended=default_launch_end,
        work_duration=shortened_work_duration,
        launch_duration=defualt_launch_duration,
    )
    return workday_obj


@pytest.fixture
def shortened_saved(default_shortened_instance):
    shortened_obj = default_shortened_instance
    shortened_obj.save()
    return shortened_obj

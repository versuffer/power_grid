import pytest
from rest_framework import status
from testing.mock_data.timesheets_validation import period_start_lte_end_data
from testing.tests.utils.mixins import TestUtilsMixin, TestValidationMixin

from common.exceptions.handlers import custom_exception_handler
from timesheets.models import TimeSheet


@pytest.mark.django_db
class TestTimesheetsValidation(TestValidationMixin, TestUtilsMixin):
    """This class contains TimeSheetViewSet validation tests"""

    model_class = TimeSheet
    base_url_name = "timesheet"

    @pytest.mark.parametrize("data", period_start_lte_end_data)
    def test_validation_period_start_lte_end(self, timesheet, auth_client, data):
        json_data = self.to_json(data)

        # Getting original exception instance
        val_err_exc = self.get_val_err_exc(message_key="period_start_lte_end")

        response = auth_client.patch(
            self.detail_url(pk=timesheet.id),
            content_type="application/json",
            data=json_data,
        )
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST

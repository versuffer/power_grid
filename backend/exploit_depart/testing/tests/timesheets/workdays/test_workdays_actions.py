from django.shortcuts import reverse
from django.urls.base import NoReverseMatch

import pytest
from rest_framework import status
from rest_framework.renderers import JSONRenderer
from testing.utils.mixins import TestUtilsMixin, TestWorkdaysMixin

from timesheets.workdays.models import WorkDay
from timesheets.workdays.serializers import WorkDayDetailSerializer


@pytest.mark.django_db
class TestWorkdaysActions(TestWorkdaysMixin, TestUtilsMixin):
    model_class = WorkDay
    base_url_name = "workday"

    def test_anon_can_not_retrieve_workday(self, workday_saved, anon_client):
        response = anon_client.get(self.detail_url(pk=workday_saved.id))

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_retrieve_workday(self, workday_saved, auth_client):
        response = auth_client.get(self.detail_url(pk=workday_saved.id))
        context = {"request": self.detail_request(pk=workday_saved.id)}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data
            == WorkDayDetailSerializer(workday_saved, context=context).data
        )

    def test_anon_can_not_list_workdays(self, employee, anon_client):
        with pytest.raises(NoReverseMatch):
            response = anon_client.get(reverse(self.list_url()))

        response = anon_client.get(reverse("timesheet-list") + "workdays/")

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_list_workdays(self, employee, auth_client):
        with pytest.raises(NoReverseMatch):
            response = auth_client.get(reverse(self.list_url()))

        response = auth_client.get(reverse("timesheet-list") + "workdays/")

        assert response.status_code == self.not_found_response.status_code
        assert response.data == self.not_found_response.data

    def test_anon_can_not_create_workday(self, anon_client):
        count = self.get_count()
        with pytest.raises(NoReverseMatch):
            response = anon_client.post(reverse(self.list_url()), data={})

        response = anon_client.post(reverse("timesheet-list") + "workdays/", data={})

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_create_workday(self, auth_client):
        count = self.get_count()
        with pytest.raises(NoReverseMatch):
            response = auth_client.post(reverse(self.list_url()), data={})

        response = auth_client.post(reverse("timesheet-list") + "workdays/", data={})

        assert (
            response.status_code
            == self.method_not_allowed_response(method="POST").status_code
        )
        assert self.get_count() == count
        assert response.data == self.method_not_allowed_response(method="POST").data

    def test_anon_can_not_update_workday(
        self, workday_saved, workday_json, anon_client
    ):
        count = self.get_count()
        response = anon_client.put(self.detail_url(pk=workday_saved.id), data={})

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_update_workday(
        self, workday_saved, workday_json, auth_client
    ):
        count = self.get_count()
        response = auth_client.put(self.detail_url(pk=workday_saved.id), data={})

        assert (
            response.status_code
            == self.method_not_allowed_response(method="PUT").status_code
        )
        assert self.get_count() == count
        assert response.data == self.method_not_allowed_response(method="PUT").data

    def test_anon_can_not_partially_update_workday(self, workday_saved, anon_client):
        count = self.get_count()
        response = anon_client.patch(self.detail_url(pk=workday_saved.id), data={})

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_partially_update_workday(
        self, workday_saved, workday_json, auth_client
    ):
        count = self.get_count()
        response = auth_client.patch(
            self.detail_url(pk=workday_saved.id),
            content_type="application/json",
            data=workday_json,
        )
        context = {"request": self.detail_request(pk=workday_saved.id)}

        assert response.status_code == status.HTTP_200_OK
        assert self.get_count() == count
        assert (
            response.data
            == WorkDayDetailSerializer(
                self.retrieve(id=workday_saved.id), context=context
            ).data
        )

    def test_anon_can_not_destroy_workday(self, workday_saved, anon_client):
        count = self.get_count()
        response = anon_client.delete(self.detail_url(pk=workday_saved.id))

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_destroy_workday(self, workday_saved, auth_client):
        count = self.get_count()
        response = auth_client.delete(self.detail_url(pk=workday_saved.id))

        assert (
            response.status_code
            == self.method_not_allowed_response(method="DELETE").status_code
        )
        assert self.get_count() == count
        assert response.data == self.method_not_allowed_response(method="DELETE").data

    def test_anon_can_not_multiply_update_workday(self, employee, anon_client):
        count = self.get_count()
        response = anon_client.put(
            reverse("timesheet-list") + "workdays/update/", data={}
        )

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_multiply_update_workday(self, employee, auth_client):
        count = self.get_count()
        response = auth_client.put(
            reverse("timesheet-list") + "workdays/update/", data={}
        )

        assert (
            response.status_code
            == self.method_not_allowed_response(method="PUT").status_code
        )
        assert self.get_count() == count
        assert response.data == self.method_not_allowed_response(method="PUT").data

    def test_anon_can_not_multiply_partially_update_workday(
        self, employee, anon_client
    ):
        count = self.get_count()
        response = anon_client.patch(
            reverse("timesheet-list") + "workdays/update/", data={}
        )

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_multiply_partially_update_workday(
        self, employee, multiple_update_workday_data, auth_client
    ):
        count = self.get_count()
        workdays_to_change = employee.workdays.all()[:3]
        workdays_id_list = list(workdays_to_change.values_list("id", flat=True))

        multiple_update_workday_data["pk_list"].extend(workdays_id_list)

        json_data = JSONRenderer().render(data=multiple_update_workday_data)

        response = auth_client.patch(
            reverse("timesheet-list") + "workdays/update/",
            content_type="application/json",
            data=json_data,
        )

        assert response.status_code == status.HTTP_200_OK
        assert self.get_count() == count
        assert response.data.get("changed_count") == len(workdays_to_change)
        assert response.data.get("changed_objects").sort() == workdays_id_list.sort()

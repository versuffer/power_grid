from django.shortcuts import reverse

import pytest
from rest_framework import status
from testing.mock_data.workdays_validation import (
    if_weekend_filled_properly_data,
    launch_data_integrity_data,
    launch_in_work_period_data,
    multiple_update_data,
    work_data_integrity_data,
    work_start_before_end_data,
)
from testing.tests.utils.mixins import TestUtilsMixin, TestValidationMixin

from common.exceptions.handlers import custom_exception_handler
from timesheets.workdays.models import WorkDay


@pytest.mark.django_db
class TestWorkdaysValidation(TestValidationMixin, TestUtilsMixin):
    model_class = WorkDay
    base_url_name = "workday"

    @pytest.mark.parametrize("data", work_data_integrity_data)
    def test_validation_work_data_integrity(self, workday_saved, auth_client, data):
        json_data = self.to_json(data)

        # Getting original exception instance
        val_err_exc = self.get_val_err_exc(message_key="work_data_integrity")

        response = auth_client.patch(
            self.detail_url(pk=workday_saved.id),
            content_type="application/json",
            data=json_data,
        )

        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

    @pytest.mark.parametrize("data", launch_data_integrity_data)
    def test_validation_launch_data_integrity(self, workday_saved, auth_client, data):
        json_data = self.to_json(data)

        # Getting original exception instance
        val_err_exc = self.get_val_err_exc(message_key="launch_data_integrity")

        response = auth_client.patch(
            self.detail_url(pk=workday_saved.id),
            content_type="application/json",
            data=json_data,
        )

        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

    @pytest.mark.parametrize("data", if_weekend_filled_properly_data)
    def test_validation_if_weekend_filled_properly(
        self, weekend_saved, auth_client, data
    ):
        json_data = self.to_json(data)

        # Getting original exception instance
        val_err_exc = self.get_val_err_exc(message_key="if_weekend_filled_properly")

        response = auth_client.patch(
            self.detail_url(pk=weekend_saved.id),
            content_type="application/json",
            data=json_data,
        )

        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

    @pytest.mark.parametrize("data", work_start_before_end_data)
    def test_validation_work_start_before_end(self, workday_saved, auth_client, data):
        json_data = self.to_json(data)

        # Getting original exception instance
        val_err_exc = self.get_val_err_exc(message_key="work_start_before_end")

        response = auth_client.patch(
            self.detail_url(pk=workday_saved.id),
            content_type="application/json",
            data=json_data,
        )

        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

    @pytest.mark.parametrize("data", launch_in_work_period_data)
    def test_validation_launch_in_work_period(self, workday_saved, auth_client, data):
        json_data = self.to_json(data)

        # Getting original exception instance
        val_err_exc = self.get_val_err_exc(message_key="launch_in_work_period")

        response = auth_client.patch(
            self.detail_url(pk=workday_saved.id),
            content_type="application/json",
            data=json_data,
        )

        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

    @pytest.mark.parametrize("data,response_data", multiple_update_data)
    def test_validation_multiple_update(self, auth_client, data, response_data):
        json_data = self.to_json(data)
        response = auth_client.patch(
            reverse("timesheet-list") + "workdays/update/",
            content_type="application/json",
            data=json_data,
        )

        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert response.data == response_data

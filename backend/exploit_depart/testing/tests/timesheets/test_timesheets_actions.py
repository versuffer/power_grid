from datetime import date, datetime

import pytest
from rest_framework import status
from testing.tests.utils.mixins import TestUtilsMixin

from timesheets.models import TimeSheet
from timesheets.serializers import (
    TimeSheetCreateSerializer,
    TimeSheetListSerializer,
    TimeSheetRetrieveSerializer,
    TimeSheetUpdateSerializer,
)


@pytest.mark.django_db
class TestTimesheetsActions(TestUtilsMixin):
    """This class contains TimeSheetViewSet action tests"""

    model_class = TimeSheet
    base_url_name = "timesheet"

    def test_anon_can_not_retrieve_timesheet(self, timesheet, anon_client):
        response = anon_client.get(self.detail_url(pk=timesheet.id))

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_retrieve_timesheet(self, timesheet, auth_client):
        response = auth_client.get(self.detail_url(pk=timesheet.id))
        context = {"request": self.list_request()}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data
            == TimeSheetRetrieveSerializer(timesheet, context=context).data
        )

    def test_anon_can_not_list_timesheets(self, timesheets, anon_client):
        response = anon_client.get(self.list_url())

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_list_timesheets(self, timesheets, auth_client):
        response = auth_client.get(self.list_url())
        context = {"request": self.list_request()}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data
            == TimeSheetListSerializer(timesheets, context=context, many=True).data
        )

    def test_anon_can_not_create_timesheet(self, anon_client):
        count = self.get_count()
        response = anon_client.post(self.list_url(), data={})
        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_create_timesheet(self, timesheet_json, auth_client):
        count = self.get_count()
        context = {"request": self.detail_request()}
        response = auth_client.post(
            self.list_url(), content_type="application/json", data=timesheet_json
        )
        timesheet_obj = self.retrieve()

        assert response.status_code == status.HTTP_201_CREATED
        assert self.get_count() == count + 1
        assert (
            response.data
            == TimeSheetCreateSerializer(timesheet_obj, context=context).data
        )

    def test_anon_can_not_update_timesheet(self, timesheet, anon_client):
        count = self.get_count()
        response = anon_client.put(self.detail_url(pk=timesheet.id), data={})

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_update_timesheet(self, timesheet, timesheet_json, auth_client):
        count = self.get_count()
        context = {"request": self.detail_request(pk=timesheet.id)}
        response = auth_client.put(
            self.detail_url(pk=timesheet.id),
            content_type="application/json",
            data=timesheet_json,
        )

        assert response.status_code == status.HTTP_200_OK
        assert self.get_count() == count
        assert (
            response.data
            == TimeSheetUpdateSerializer(self.retrieve(), context=context).data
        )

    def test_anon_can_not_partially_update_timesheet(self, timesheet, anon_client):
        count = self.get_count()
        response = anon_client.patch(
            self.detail_url(pk=timesheet.id),
            data={},
        )

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_partially_update_timesheet(self, timesheet, auth_client):
        count = self.get_count()
        data = {
            "period_end": date(year=datetime.now().year, month=2, day=20).isoformat()
        }
        context = {"request": self.detail_request(pk=timesheet.id)}

        response = auth_client.patch(
            self.detail_url(pk=timesheet.id),
            data=data,
        )

        assert response.status_code == status.HTTP_200_OK
        assert self.get_count() == count
        assert (
            response.data
            == TimeSheetUpdateSerializer(self.retrieve(), context=context).data
        )

    def test_anon_can_not_destroy_timesheet(self, timesheet, anon_client):
        count = self.get_count()
        response = anon_client.delete(self.detail_url(pk=timesheet.id))

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_destroy_timesheet(self, timesheet, auth_client):
        count = self.get_count()
        response = auth_client.delete(self.detail_url(pk=timesheet.id))

        assert response.status_code == status.HTTP_204_NO_CONTENT
        assert self.get_count() == count - 1
        assert not response.data
        assert not TimeSheet.objects.filter(pk=timesheet.id).exists()

import pytest
from testing.tests.utils.mixins import TestUtilsMixin
from testing.tests.utils.serializers import WorkDayTestFillingSerializer

from common.data.timesheets.choices import shortened, weekend, workday
from common.services.workdays_manager import create_raw_calendar
from timesheets.workdays.models import WorkDay


@pytest.mark.django_db
class TestWorkdaysManager(TestUtilsMixin):
    model_class = WorkDay

    def get_workday_obj(self, **filters):
        return self.model_class.objects.filter(**filters).first()

    @staticmethod
    def serialize(workday_obj):
        return WorkDayTestFillingSerializer(workday_obj).data

    def test_create_raw_calendar(
        self, employee, default_workday, default_weekend, default_shortened
    ):
        initial_count = self.get_count()
        create_raw_calendar(employee)
        check_duplicates_count = self.get_count()

        workday_sample = self.get_workday_obj(day_status=workday)
        weekend_sample = self.get_workday_obj(day_status=weekend)
        shortened_sample = self.get_workday_obj(day_status=shortened)

        assert initial_count == check_duplicates_count
        assert self.serialize(workday_sample) == self.serialize(default_workday)
        assert self.serialize(weekend_sample) == self.serialize(default_weekend)
        assert self.serialize(shortened_sample) == self.serialize(default_shortened)
        assert self.get_count() in [365, 366]

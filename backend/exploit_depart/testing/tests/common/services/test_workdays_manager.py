from datetime import date, datetime

from django.db.models import Q

import pytest
from testing.tests.utils.mixins import TestUtilsMixin, TestWorkdaysMixin

from common.data.timesheets.choices import shortened, weekend, workday
from common.services.workdays_manager import create_raw_calendar
from timesheets.workdays.models import WorkDay


@pytest.mark.django_db
class TestWorkdaysManager(TestWorkdaysMixin, TestUtilsMixin):
    model_class = WorkDay

    def test_create_raw_calendar(
        self,
        employee,
        default_workday_instance,
        default_weekend_instance,
        default_shortened_instance,
    ):
        initial_count = self.get_count()
        create_raw_calendar(employee)
        check_duplicates_count = self.get_count()

        workday_sample = self.get_workday_obj(day_status=workday)
        weekend_sample = self.get_workday_obj(day_status=weekend)
        shortened_sample = self.get_workday_obj(day_status=shortened)

        assert initial_count == check_duplicates_count
        assert self._serialize(workday_sample) == self._serialize(
            default_workday_instance
        )
        assert self._serialize(weekend_sample) == self._serialize(
            default_weekend_instance
        )
        assert self._serialize(shortened_sample) == self._serialize(
            default_shortened_instance
        )
        assert self.get_count() in [365, 366]

    def test_add_workdays(self, timesheet):
        initial_workdays = timesheet.workdays.all()
        initial_workdays_set = set(initial_workdays)
        initial_workdays_id_list = list(initial_workdays.values_list("id", flat=True))

        new_period_start = date(year=datetime.now().year, month=2, day=21)
        new_period_end = date(year=datetime.now().year, month=2, day=25)

        new_period_workdays = self.model_class.objects.filter(
            Q(date__gte=new_period_start) & Q(date__lte=new_period_end)
        )

        timesheet.period_start = new_period_start
        timesheet.period_end = new_period_end
        timesheet.save()

        check_change_workdays = timesheet.workdays.all()
        check_change_workdays_set = set(check_change_workdays)

        assert not initial_workdays_set.issubset(check_change_workdays_set)
        assert self._serialize_many(initial_workdays) == self._serialize_many(
            self.filter(id__in=initial_workdays_id_list)
        )
        assert self._serialize_many(new_period_workdays) == self._serialize_many(
            check_change_workdays
        )

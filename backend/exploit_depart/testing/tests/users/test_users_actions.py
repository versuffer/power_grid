from django.contrib.auth import get_user_model

import pytest
from rest_framework import status
from testing.data.valid_data import valid_user_update_data
from testing.utils.mixins import TestUtilsMixin

from users.models import User
from users.serializers import UserSelfDetailSerializer

User = get_user_model()


@pytest.mark.django_db
class TestUsersActions(TestUtilsMixin):
    """This class contains ExtendedUserViewSet action tests"""

    model_class = User
    base_url_name = "user"

    def test_anon_can_not_retrieve_user(self, user, anon_client):
        response = anon_client.get(self.detail_url(pk=user.id))

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_retrieve_user(self, user, auth_client):
        response = auth_client.get(self.detail_url(pk=user.id))

        assert response.status_code == self.not_found_response.status_code
        assert response.data == self.not_found_response.data

    def test_anon_can_not_list_users(self, anon_client):
        response = anon_client.get(self.list_url())

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_list_users(self, auth_client):
        response = auth_client.get(self.list_url())

        assert response.status_code == self.not_found_response.status_code
        assert response.data == self.not_found_response.data

    def test_anon_can_not_create_user(self, anon_client):
        count = self.get_count()
        response = anon_client.post(self.list_url(), data={})

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_create_user(self, auth_client):
        count = self.get_count()
        response = auth_client.post(self.list_url(), data={})

        assert response.status_code == self.permission_denied_response.status_code
        assert self.get_count() == count
        assert response.data == self.permission_denied_response.data

    def test_anon_can_not_update_user(self, user, anon_client):
        count = self.get_count()
        response = anon_client.put(self.detail_url(pk=user.id), data={})

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_update_user(self, user, auth_client):
        count = self.get_count()
        response = auth_client.put(self.detail_url(pk=user.id), data={})

        assert response.status_code == self.not_found_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_found_response.data

    def test_anon_can_not_partially_update_user(self, user, anon_client):
        count = self.get_count()
        response = anon_client.patch(self.detail_url(pk=user.id), data={})

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_not_partially_update_user(self, user, auth_client):
        count = self.get_count()
        response = auth_client.patch(self.detail_url(pk=user.id), data={})

        assert response.status_code == self.not_found_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_found_response.data

    def test_anon_can_not_destroy_user(self, user, anon_client):
        count = self.get_count()
        response = anon_client.delete(self.detail_url(pk=user.id))

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data
        assert User.objects.filter(pk=user.id).exists()

    def test_auth_can_not_destroy_user(self, user, auth_client):
        count = self.get_count()
        response = auth_client.delete(self.detail_url(pk=user.id))

        assert response.status_code == self.permission_denied_response.status_code
        assert self.get_count() == count
        assert response.data == self.permission_denied_response.data
        assert User.objects.filter(pk=user.id).exists()

    def test_me_auth_can_retrieve_itself(self, auth_client):
        response = auth_client.get(self.list_url() + "me/")

        assert response.status_code == status.HTTP_200_OK
        assert response.data == UserSelfDetailSerializer(self.retrieve()).data

    def test_me_auth_can_update_profile(self, user, employee, auth_client):
        count = self.get_count()
        response = auth_client.patch(
            self.list_url() + "me/", data=valid_user_update_data
        )

        assert response.status_code == status.HTTP_200_OK
        assert self.get_count() == count
        assert response.data == UserSelfDetailSerializer(self.retrieve()).data

    def test_me_auth_can_not_destroy_itself(self, user, auth_client):
        count = self.get_count()
        response = auth_client.delete(self.list_url() + "me/")

        assert response.status_code == self.permission_denied_response.status_code
        assert self.get_count() == count
        assert response.data == self.permission_denied_response.data
        assert User.objects.filter(pk=user.id).exists()

import pytest
from rest_framework import status

from common.serializers.person import (
    RightDetailSerializer,
    RightHyperlinkedDetailSerializer,
)
from employees.models import Right

from .utils.mixins import TestUtilsMixin


@pytest.mark.django_db
class TestRights(TestUtilsMixin):
    """This class contains RightViewSet action tests"""

    model_class = Right
    base_url_name = "right"

    def test_anon_can_not_retrieve_right(self, right, anon_client):
        response = anon_client.get(self.detail_url(pk=right.id))

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_retrieve_right(self, right, auth_client):
        response = auth_client.get(self.detail_url(pk=right.id))

        assert response.status_code == status.HTTP_200_OK
        assert response.data == RightDetailSerializer(right).data

    def test_anon_can_not_list_rights(self, rights, anon_client):
        response = anon_client.get(self.list_url())

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_list_rights(self, rights, auth_client):
        response = auth_client.get(self.list_url())
        context = {"request": self.list_request()}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data
            == RightHyperlinkedDetailSerializer(rights, context=context, many=True).data
        )

    def test_anon_can_not_create_right(self, right_json, anon_client):
        count = self.get_count()
        response = anon_client.post(
            self.list_url(), content_type="application/json", data=right_json
        )
        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_create_right(self, right_json, auth_client):
        count = self.get_count()
        response = auth_client.post(
            self.list_url(), content_type="application/json", data=right_json
        )
        assert response.status_code == status.HTTP_201_CREATED
        assert self.get_count() == count + 1
        assert response.data == RightDetailSerializer(self.retrieve()).data

    def test_anon_can_not_update_right(self, right, right_json, anon_client):
        count = self.get_count()
        response = anon_client.put(
            self.detail_url(pk=right.id),
            content_type="application/json",
            data=right_json,
        )
        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_update_right(self, right, right_json, auth_client):
        count = self.get_count()
        response = auth_client.put(
            self.detail_url(pk=right.id),
            content_type="application/json",
            data=right_json,
        )
        assert response.status_code == status.HTTP_200_OK
        assert self.get_count() == count
        assert response.data == RightDetailSerializer(self.retrieve()).data

    def test_anon_can_not_partially_update_right(self, right, anon_client):
        count = self.get_count()
        data = {"name": "Быть ответственным руководителем работ"}
        response = anon_client.patch(self.detail_url(pk=right.id), data=data)

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_partially_update_right(self, right, auth_client):
        count = self.get_count()
        data = {"name": "Быть ответственным руководителем работ"}
        response = auth_client.patch(self.detail_url(pk=right.id), data=data)

        assert response.status_code == status.HTTP_200_OK
        assert self.get_count() == count
        assert response.data == RightDetailSerializer(self.retrieve()).data

    def test_anon_can_not_destroy_right(self, right, anon_client):
        count = self.get_count()
        response = anon_client.delete(self.detail_url(pk=right.id))

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_destroy_right(self, right, auth_client):
        count = self.get_count()
        response = auth_client.delete(self.detail_url(pk=right.id))

        assert response.status_code == status.HTTP_204_NO_CONTENT
        assert self.get_count() == count - 1
        assert not response.data
        assert not Right.objects.filter(pk=right.id).exists()

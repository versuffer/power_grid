import pytest
from rest_framework import status

from common.serializers.person import (
    EmployeeDefaultSerializer,
    EmployeeHyperlinkedDetailSerializer,
    EmployeeRetrieveSerializer,
)
from employees.models import Employee

from .utils.mixins import TestUtilsMixin


@pytest.mark.django_db
class TestEmployees(TestUtilsMixin):
    model_class = Employee
    base_url_name = "employee"

    def test_anon_can_not_retrieve_employee(self, employee, anon_client):
        response = anon_client.get(self.detail_url(employee.id))

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_retrieve_employee(self, employee, auth_client):
        response = auth_client.get(self.detail_url(employee.id))
        context = {"request": self.list_request()}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data == EmployeeRetrieveSerializer(employee, context=context).data
        )

    def test_admin_can_retrieve_employee(self, employee, admin_client):
        response = admin_client.get(self.detail_url(employee.id))
        context = {"request": self.list_request()}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data == EmployeeRetrieveSerializer(employee, context=context).data
        )

    def test_anon_can_not_list_employees(self, employees, anon_client):
        response = anon_client.get(self.list_url())

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_list_employees(self, employees, auth_client):
        response = auth_client.get(self.list_url())
        context = {"request": self.list_request()}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data
            == EmployeeHyperlinkedDetailSerializer(
                employees, context=context, many=True
            ).data
        )

    def test_admin_can_list_employees(self, employees, admin_client):
        response = admin_client.get(self.list_url())
        context = {"request": self.list_request()}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data
            == EmployeeHyperlinkedDetailSerializer(
                employees, context=context, many=True
            ).data
        )

    def test_anon_can_not_create_employee(self, employee_json, anon_client):
        count = self.get_count()
        response = anon_client.post(
            self.list_url(),
            content_type="application/json",
            data=employee_json,
        )

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_create_employee(self, employee_json, auth_client):
        count = self.get_count()
        context = {"request": self.detail_request()}
        response = auth_client.post(
            self.list_url(),
            content_type="application/json",
            data=employee_json,
        )

        assert response.status_code == status.HTTP_201_CREATED
        assert self.get_count() == count + 1
        assert (
            response.data
            == EmployeeDefaultSerializer(self.retrieve(), context=context).data
        )

    def test_admin_can_create_employee(self, employee_json, admin_client):
        count = self.get_count()
        context = {"request": self.detail_request()}
        response = admin_client.post(
            self.list_url(),
            content_type="application/json",
            data=employee_json,
        )

        assert response.status_code == status.HTTP_201_CREATED
        assert self.get_count() == count + 1
        assert (
            response.data
            == EmployeeDefaultSerializer(self.retrieve(), context=context).data
        )

    def test_update(self):
        pass

    def test_partial_update(self):
        pass

    def test_destroy(self):
        pass

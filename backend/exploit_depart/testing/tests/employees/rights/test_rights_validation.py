import pytest
from rest_framework import status
from testing.tests.utils.mixins import TestUtilsMixin, TestValidationMixin

from common.data.employees import choices
from common.exceptions.handlers import custom_exception_handler
from employees.rights.models import Right


@pytest.mark.django_db
class TestRightsValidation(TestValidationMixin, TestUtilsMixin):
    """This class contains RightViewSet validation tests"""

    model_class = Right
    base_url_name = "right"

    @pytest.mark.parametrize(
        "data",
        [
            {
                "category": choices.ELEC_CAT,
                "voltage_level_grade": choices.NOT_SPECIFIED,
            },
            {
                "category": choices.OTHER_CAT,
                "voltage_level_grade": choices.BELOW_1000_V,
            },
        ],
    )
    def test_validation_if_volt_level_filled(self, right, auth_client, data):
        json_data = self.to_json(data)

        # Getting original exception instance
        val_err_exc = self.get_val_err_exc(message_key="if_volt_level_filled")

        response = auth_client.patch(
            self.detail_url(pk=right.id),
            content_type="application/json",
            data=json_data,
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

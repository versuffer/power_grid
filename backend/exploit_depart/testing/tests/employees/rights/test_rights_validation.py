import pytest
from rest_framework import status
from rest_framework.exceptions import ValidationError
from rest_framework.renderers import JSONRenderer
from testing.tests.utils.mixins import TestUtilsMixin

from common.base.validators import BaseValidator
from common.data.employees import choices
from common.data.employees.validation import messages
from common.exceptions.handlers import custom_exception_handler
from employees.rights.models import Right


@pytest.mark.django_db
class TestRightsValidation(TestUtilsMixin):
    """This class contains RightViewSet validation tests"""

    model_class = Right
    base_url_name = "right"

    def test_validation_if_volt_level_filled_1(self, right, auth_client):
        data = {
            "category": choices.ELEC_CAT,
            "voltage_level_grade": choices.NOT_SPECIFIED,
        }
        # Getting original exception instance
        error_dict = BaseValidator.get_default_error_dict()
        error_dict["messages"] = [messages.get("if_volt_level_filled")]
        val_err_exc = ValidationError(detail=error_dict)

        json_data = JSONRenderer().render(data=data)
        response = auth_client.patch(
            self.detail_url(pk=right.id),
            content_type="application/json",
            data=json_data,
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

    def test_validation_if_volt_level_filled_2(self, right, auth_client):
        data = {
            "category": choices.OTHER_CAT,
            "voltage_level_grade": choices.BELOW_1000_V,
        }
        # Getting original exception instance
        error_dict = BaseValidator.get_default_error_dict()
        error_dict["messages"] = [messages.get("if_volt_level_filled")]
        val_err_exc = ValidationError(detail=error_dict)

        json_data = JSONRenderer().render(data=data)
        response = auth_client.patch(
            self.detail_url(pk=right.id),
            content_type="application/json",
            data=json_data,
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

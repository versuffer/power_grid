import pytest
from rest_framework import status
from rest_framework.test import APIRequestFactory
from testing.tests.utils.mixins import TestUtilsMixin
from testing.tests.utils.serializers import WorkDayTestSerializer

from employees.models import Employee
from employees.serializers import (
    EmployeeDefaultSerializer,
    EmployeeHyperlinkedDetailSerializer,
    EmployeeRetrieveSerializer,
    EmployeeRightsTableSerializer,
)
from timesheets.workdays.models import WorkDay


@pytest.mark.django_db
class TestEmployeesActions(TestUtilsMixin):
    """This class contains EmployeeViewSet action tests"""

    model_class = Employee
    base_url_name = "employee"

    def test_anon_can_not_retrieve_employee(self, employee, anon_client):
        response = anon_client.get(self.detail_url(pk=employee.id))

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_retrieve_employee(self, employee, auth_client):
        response = auth_client.get(self.detail_url(pk=employee.id))
        context = {"request": self.list_request()}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data == EmployeeRetrieveSerializer(employee, context=context).data
        )

    def test_anon_can_not_list_employees(self, employees, anon_client):
        response = anon_client.get(self.list_url())

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_list_employees(self, employees, auth_client):
        response = auth_client.get(self.list_url())
        context = {"request": self.list_request()}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data
            == EmployeeHyperlinkedDetailSerializer(
                employees, context=context, many=True
            ).data
        )

    def test_anon_can_not_create_employee(self, employee_json, anon_client):
        count = self.get_count()
        response = anon_client.post(
            self.list_url(),
            content_type="application/json",
            data=employee_json,
        )
        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

    def test_auth_can_create_employee(self, employee_json, auth_client):
        count = self.get_count()
        context = {"request": self.detail_request()}
        response = auth_client.post(
            self.list_url(),
            content_type="application/json",
            data=employee_json,
        )
        employee_obj = self.retrieve()
        employee_workdays = employee_obj.workdays.all()

        assert response.status_code == status.HTTP_201_CREATED
        assert self.get_count() == count + 1
        assert (
            response.data
            == EmployeeDefaultSerializer(employee_obj, context=context).data
        )
        assert employee_workdays.count() in [365, 366]
        assert (
            WorkDayTestSerializer(WorkDay.objects.all(), many=True).data
            == WorkDayTestSerializer(employee_workdays, many=True).data
        )

    def test_anon_can_not_update_employee(self, employee, employee_json, anon_client):
        count = self.get_count()
        employee_workdays = employee.workdays.all()
        employee_workdays_count = employee_workdays.count()

        response = anon_client.put(
            self.detail_url(pk=employee.id),
            content_type="application/json",
            data=employee_json,
        )
        employee_obj = self.retrieve()

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

        assert employee_obj.workdays.all().count() == employee_workdays_count
        assert (
            WorkDayTestSerializer(WorkDay.objects.all(), many=True).data
            == WorkDayTestSerializer(employee_workdays, many=True).data
        )

    def test_auth_can_update_employee(self, employee, employee_json, auth_client):
        count = self.get_count()
        employee_workdays = employee.workdays.all()
        employee_workdays_count = employee_workdays.count()

        context = {"request": self.detail_request(pk=employee.id)}
        response = auth_client.put(
            self.detail_url(pk=employee.id),
            content_type="application/json",
            data=employee_json,
        )
        employee_obj = self.retrieve()

        assert response.status_code == status.HTTP_200_OK
        assert self.get_count() == count
        assert (
            response.data
            == EmployeeDefaultSerializer(employee_obj, context=context).data
        )
        assert employee_obj.workdays.all().count() == employee_workdays_count
        assert (
            WorkDayTestSerializer(WorkDay.objects.all(), many=True).data
            == WorkDayTestSerializer(employee_workdays, many=True).data
        )

    def test_anon_can_not_partially_update_employee(self, employee, anon_client):
        count = self.get_count()
        employee_workdays = employee.workdays.all()
        employee_workdays_count = employee_workdays.count()

        data = {"first_name": self.get_random_string(str_len=20)}

        response = anon_client.patch(
            self.detail_url(pk=employee.id),
            data=data,
        )
        employee_obj = self.retrieve()

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

        assert employee_obj.workdays.all().count() == employee_workdays_count
        assert (
            WorkDayTestSerializer(WorkDay.objects.all(), many=True).data
            == WorkDayTestSerializer(employee_workdays, many=True).data
        )

    def test_auth_can_partially_update_employee(self, employee, auth_client):
        count = self.get_count()
        employee_workdays = employee.workdays.all()
        employee_workdays_count = employee_workdays.count()

        data = {"first_name": self.get_random_string(str_len=20)}

        context = {"request": self.detail_request(pk=employee.id)}
        response = auth_client.patch(
            self.detail_url(pk=employee.id),
            data=data,
        )
        employee_obj = self.retrieve()

        assert response.status_code == status.HTTP_200_OK
        assert self.get_count() == count
        assert (
            response.data
            == EmployeeDefaultSerializer(employee_obj, context=context).data
        )
        assert employee_obj.workdays.all().count() == employee_workdays_count
        assert (
            WorkDayTestSerializer(WorkDay.objects.all(), many=True).data
            == WorkDayTestSerializer(employee_workdays, many=True).data
        )

    def test_anon_can_not_destroy_employee(self, employee, anon_client):
        count = self.get_count()
        employee_workdays = employee.workdays.all()
        employee_workdays_count = employee_workdays.count()

        response = anon_client.delete(
            self.detail_url(pk=employee.id),
        )
        employee_obj = self.retrieve()

        assert response.status_code == self.not_auth_response.status_code
        assert self.get_count() == count
        assert response.data == self.not_auth_response.data

        assert employee_obj.workdays.all().count() == employee_workdays_count
        assert (
            WorkDayTestSerializer(WorkDay.objects.all(), many=True).data
            == WorkDayTestSerializer(employee_workdays, many=True).data
        )

    def test_auth_can_destroy_employee(self, employee, auth_client):
        count = self.get_count()
        response = auth_client.delete(
            self.detail_url(pk=employee.id),
        )

        assert response.status_code == status.HTTP_204_NO_CONTENT
        assert self.get_count() == count - 1
        assert not response.data
        assert not Employee.objects.filter(pk=employee.id).exists()
        assert not WorkDay.objects.filter(employee=employee.id).exists()

    def test_anon_can_not_list_rights_table(self, employees, anon_client):
        rights_table_url = self.list_url() + "rights-table/"
        response = anon_client.get(rights_table_url)

        assert response.status_code == self.not_auth_response.status_code
        assert response.data == self.not_auth_response.data

    def test_auth_can_list_rights_table(self, employees, auth_client):
        rights_table_url = self.list_url() + "rights-table/"
        rights_table_request = APIRequestFactory().get(rights_table_url)

        response = auth_client.get(rights_table_url)
        context = {"request": rights_table_request}

        assert response.status_code == status.HTTP_200_OK
        assert (
            response.data
            == EmployeeRightsTableSerializer(employees, context=context, many=True).data
        )

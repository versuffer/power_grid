import random
import string

from django.db.models import Model
from django.urls import reverse

from rest_framework.exceptions import NotAuthenticated
from rest_framework.test import APIRequestFactory

from common.exceptions.handlers import custom_exception_handler


class TestUtilsMixin:
    model_class: type[Model]
    base_url_name: str

    @property
    def not_auth_response(self):
        return custom_exception_handler(NotAuthenticated(), context=None)

    def get_count(self, **filters):
        return self.model_class.objects.filter(**filters).count()

    def retrieve(self, id=None, **filter) -> Model:
        if id:
            filter["id"] = id
            return self.model_class.objects.get(**filter)

        return self.model_class.objects.all().first()

    def detail_url(self, *args, **kwargs):
        return reverse(f"{self.base_url_name}-detail", args=args, kwargs=kwargs)

    def list_url(self, *args, **kwargs):
        return reverse(f"{self.base_url_name}-list", args=args, kwargs=kwargs)

    def detail_request(self, *args, **kwargs):
        if not kwargs.get("pk"):
            kwargs["pk"] = 1
        return APIRequestFactory().get(self.detail_url(*args, **kwargs))

    def list_request(self, *args, **kwargs):
        return APIRequestFactory().get(self.list_url(*args, **kwargs))

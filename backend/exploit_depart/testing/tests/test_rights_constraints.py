from django.core.exceptions import ValidationError

import pytest
from rest_framework import status
from rest_framework.renderers import JSONRenderer

from common.exceptions.handlers import custom_exception_handler
from employees.models import Right
from employees.validation import choices

from .utils.mixins import TestUtilsMixin


@pytest.mark.django_db
class TestRightsConstraints(TestUtilsMixin):
    """This class contains RightViewSet action tests"""

    model_class = Right
    base_url_name = "right"

    def test_constraint_unique_right(self, right, auth_client):
        data = {
            "name": right.name,
            "category": right.category,
            "voltage_level_grade": right.voltage_level_grade,
            "description": None,
        }
        # Getting original exception instance
        val_err_exc = None
        try:
            Right.objects.create(**data)
        except ValidationError as exc:
            val_err_exc = exc

        json_data = JSONRenderer().render(data=data)
        response = auth_client.post(
            self.list_url(), content_type="application/json", data=json_data
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

    def test_constraint_if_volt_level_filled_1(self, right, auth_client):
        data = {
            "category": choices.ELEC_CAT,
            "voltage_level_grade": choices.NOT_SPECIFIED,
        }
        # Getting original exception instance
        val_err_exc = None
        try:
            right.category = data.get("category")
            right.voltage_level_grade = data.get("voltage_level_grade")
            right.save()
        except ValidationError as exc:
            val_err_exc = exc

        json_data = JSONRenderer().render(data=data)
        response = auth_client.patch(
            self.detail_url(pk=right.id),
            content_type="application/json",
            data=json_data,
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

    def test_constraint_if_volt_level_filled_2(self, right, auth_client):
        data = {
            "category": choices.OTHER_CAT,
            "voltage_level_grade": choices.BELOW_1000_V,
        }
        # Getting original exception instance
        val_err_exc = None
        try:
            right.category = data.get("category")
            right.voltage_level_grade = data.get("voltage_level_grade")
            right.save()
        except ValidationError as exc:
            val_err_exc = exc

        json_data = JSONRenderer().render(data=data)
        response = auth_client.patch(
            self.detail_url(pk=right.id),
            content_type="application/json",
            data=json_data,
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST
        assert (
            response.data == custom_exception_handler(exc=val_err_exc, context={}).data
        )

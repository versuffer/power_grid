from collections import ChainMap

from django.db.models import Model
from django.urls import reverse

from rest_framework.exceptions import (
    MethodNotAllowed,
    NotAuthenticated,
    NotFound,
    PermissionDenied,
    ValidationError,
)
from rest_framework.renderers import JSONRenderer
from rest_framework.test import APIRequestFactory

from common.data.employees.validation import messages as empl_messages
from common.data.mixins import messages as mix_messages
from common.data.timesheets.validation import messages as ts_messages
from common.exceptions.handlers import custom_exception_handler
from common.serialization.validation.mixins import ValidatorMixin

from .serializers import WorkDayTestFillingSerializer, WorkDayTestSerializer


class TestUtilsMixin:
    model_class: type[Model]
    base_url_name: str

    @property
    def not_auth_response(self):
        return custom_exception_handler(NotAuthenticated(), context=None)

    @property
    def not_found_response(self):
        return custom_exception_handler(NotFound(), context=None)

    @property
    def permission_denied_response(self):
        return custom_exception_handler(PermissionDenied(), context=None)

    @staticmethod
    def method_not_allowed_response(method):
        return custom_exception_handler(MethodNotAllowed(method=method), context=None)

    @staticmethod
    def to_json(data: dict):
        return JSONRenderer().render(data=data)

    def get_count(self, **filters):
        return self.model_class.objects.filter(**filters).count()

    def retrieve(self, id=None, **filter) -> Model:
        if id:
            filter["id"] = id
            return self.model_class.objects.get(**filter)

        return self.model_class.objects.all().first()

    def filter(self, **filters):
        return self.model_class.objects.filter(**filters)

    def detail_url(self, *args, **kwargs):
        return reverse(f"{self.base_url_name}-detail", args=args, kwargs=kwargs)

    def list_url(self, *args, **kwargs):
        return reverse(f"{self.base_url_name}-list", args=args, kwargs=kwargs)

    def detail_request(self, *args, **kwargs):
        if not kwargs.get("pk"):
            kwargs["pk"] = 1
        return APIRequestFactory().get(self.detail_url(*args, **kwargs))

    def list_request(self, *args, **kwargs):
        return APIRequestFactory().get(self.list_url(*args, **kwargs))


class TestWorkdaysMixin:
    def get_workday_obj(self, **filters):
        return self.model_class.objects.filter(**filters).first()

    @staticmethod
    def _serialize(workday_obj):
        return WorkDayTestFillingSerializer(workday_obj).data

    @staticmethod
    def _serialize_many(workday_objects):
        def _sort_by_id(workday_obj):
            return workday_obj.get("id")

        return WorkDayTestSerializer(workday_objects, many=True).data.sort(
            key=_sort_by_id
        )


class TestValidationMixin:
    error_messages = ChainMap(ts_messages, empl_messages, mix_messages)
    error_dict = ValidatorMixin.get_default_error_dict()

    def get_val_err_exc(self, message_key: str):
        self.__class__.error_dict["messages"] = [self.error_messages.get(message_key)]
        return ValidationError(detail=self.__class__.error_dict)

    def get_mult_val_err_exc(self, message_keys: list[str]):
        self.__class__.error_dict["messages"] = []
        for key in message_keys:
            self.__class__.error_dict["messages"].append(self.error_messages.get(key))
        return ValidationError(detail=self.__class__.error_dict)

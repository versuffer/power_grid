from rest_framework.exceptions import ValidationError

from common.base.validators import BaseValidator
from common.data.employees import choices
from common.data.employees.validation import messages


class RightValidator(BaseValidator):
    def right_object_validation(self):
        self.error_dict = super().get_default_error_dict()

        try:
            category = self.data["category"]
        except KeyError:
            category = self.serializer_inst.instance.category

        try:
            voltage_level_grade = self.data["voltage_level_grade"]
        except KeyError:
            voltage_level_grade = self.serializer_inst.instance.voltage_level_grade

        return self._perform_validation(category, voltage_level_grade)

    def _perform_validation(self, category, voltage_level_grade):
        if category == choices.ELEC_CAT:
            if voltage_level_grade == choices.NOT_SPECIFIED:
                self.error_dict["messages"] = [messages.get("if_volt_level_filled")]
                raise ValidationError(detail=self.error_dict)

        if category == choices.OTHER_CAT:
            if not voltage_level_grade == choices.NOT_SPECIFIED:
                self.error_dict["messages"] = [messages.get("if_volt_level_filled")]
                raise ValidationError(detail=self.error_dict)

        return self.data

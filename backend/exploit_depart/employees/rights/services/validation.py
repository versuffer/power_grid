from rest_framework.exceptions import ValidationError

from common.serialization.validation.mixins import ValidatorMixin
from common.data.employees import choices
from common.data.employees.validation import messages


class RightValidator(ValidatorMixin):
    def right_object_validation(self):
        category = self.get_from_dict_or_db("category")
        voltage_level_grade = self.get_from_dict_or_db("voltage_level_grade")

        return self._perform_validation(category, voltage_level_grade)

    def _perform_validation(self, category, voltage_level_grade):
        self.error_dict = self.get_default_error_dict()

        if category == choices.ELEC_CAT:
            if voltage_level_grade == choices.NOT_SPECIFIED:
                self.error_dict["messages"] = [messages.get("if_volt_level_filled")]
                raise ValidationError(detail=self.error_dict)

        if category == choices.OTHER_CAT:
            if not voltage_level_grade == choices.NOT_SPECIFIED:
                self.error_dict["messages"] = [messages.get("if_volt_level_filled")]
                raise ValidationError(detail=self.error_dict)

        return self.data

from drf_spectacular.utils import extend_schema
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.viewsets import ModelViewSet

from common.views.mixins import MultiSerializerMixin
from employees.serializers import (
    EmployeeDefaultSerializer,
    EmployeeHyperlinkedDetailSerializer,
    EmployeeRetrieveSerializer,
    EmployeeRightsTableSerializer,
)

from .models import Employee


@extend_schema(tags=["Employees"])
class EmployeeViewSet(MultiSerializerMixin, ModelViewSet):
    queryset = Employee.objects.prefetch_related("supervisors", "rights").all()
    serializer_class = EmployeeDefaultSerializer
    serializer_action_classes = {
        "list": EmployeeHyperlinkedDetailSerializer,
        "retrieve": EmployeeRetrieveSerializer,
        "list_rights_table": EmployeeRightsTableSerializer,
    }

    @action(methods=["get"], detail=False, url_path="rights-table")
    def list_rights_table(self, request, *args, **kwargs):
        queryset = self.filter_queryset(self.get_queryset())

        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = self.get_serializer(queryset, many=True)
        return Response(serializer.data)

from rest_framework import serializers

from common.serializers.person import EmployeeHyperlinkedDetailSerializer

from .models import TimeSheet, WorkDay
from .services.validation import WorkDayValidator


class WorkDayDetailSerializer(serializers.ModelSerializer):
    employee = EmployeeHyperlinkedDetailSerializer()

    class Meta:
        model = WorkDay
        fields = "__all__"
        read_only_fields = ["date", "employee", "work_duration", "launch_duration"]

    def validate(self, data):
        validator = WorkDayValidator(self, data)
        return validator.workday_validation()


# Need to implement MultipleUpdateSerializerMixin
class WorkDayMultipleUpdateSerializer(serializers.ModelSerializer):
    pk_list = serializers.ListField(child=serializers.IntegerField())

    class Meta:
        model = WorkDay
        exclude = ["id"]
        read_only_fields = ["date", "employee", "work_duration", "launch_duration"]

    def validate(self, data):
        validator = WorkDayValidator(self, data)
        return validator.multiple_workday_validation()


class WorkDayHyperlinkedDetailSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = WorkDay
        fields = ["url", "day_status", "work_duration"]


class TimeSheetDefaultSerializer(serializers.ModelSerializer):
    class Meta:
        model = TimeSheet
        fields = "__all__"
        read_only_fields = ["workdays"]


class TimeSheetListSerializer(serializers.ModelSerializer):
    employees = EmployeeHyperlinkedDetailSerializer(many=True)

    class Meta:
        model = TimeSheet
        exclude = ["workdays"]


class TimeSheetRetrieveSerializer(
    serializers.HyperlinkedModelSerializer, TimeSheetDefaultSerializer
):
    employees = EmployeeHyperlinkedDetailSerializer(many=True)
    workdays = WorkDayHyperlinkedDetailSerializer(many=True)


class TimeSheetCreateSerializer(TimeSheetDefaultSerializer):
    def create(self, validated_data):
        instance = super().create(validated_data)
        instance.save()
        return instance


class TimeSheetUpdateSerializer(TimeSheetDefaultSerializer):
    def update(self, instance, validated_data):
        instance = super().update(instance, validated_data)
        instance.save()
        return instance

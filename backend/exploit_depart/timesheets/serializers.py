from common.models.person.serializers import EmployeeHyperlinkedDetailSerializer
from rest_framework import serializers

from .models import TimeSheet, WorkDay


class WorkDayDetailSerializer(serializers.ModelSerializer):
    employee = EmployeeHyperlinkedDetailSerializer()

    class Meta:
        model = WorkDay
        fields = "__all__"
        read_only_fields = ["date", "employee", "work_duration", "launch_duration"]


class WorkDayHyperlinkedDetailSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = WorkDay
        fields = ["url", "day_status", "work_duration"]


# This serializer is redundant and used only for filling serializer_class field in TimeSheetViewSet
class TimeSheetDefaultSerializer(serializers.ModelSerializer):
    class Meta:
        model = TimeSheet
        fields = "__all__"


class TimeSheetListSerializer(serializers.ModelSerializer):
    employees = EmployeeHyperlinkedDetailSerializer(many=True)

    class Meta:
        model = TimeSheet
        exclude = ["workdays"]


class TimeSheetRetrieveSerializer(serializers.HyperlinkedModelSerializer):
    employees = EmployeeHyperlinkedDetailSerializer(many=True)
    workdays = WorkDayHyperlinkedDetailSerializer(many=True)

    class Meta:
        model = TimeSheet
        fields = "__all__"
        read_only_fields = ["workdays"]


class TimeSheetCreateSerializer(serializers.ModelSerializer):
    class Meta:
        model = TimeSheet
        fields = "__all__"
        read_only_fields = ["workdays"]

    def create(self, validated_data):
        instance = super().create(validated_data)
        instance.save()
        return instance


class TimeSheetUpdateSerializer(serializers.ModelSerializer):
    class Meta:
        model = TimeSheet
        fields = "__all__"
        read_only_fields = ["workdays"]

    def update(self, instance, validated_data):
        instance = super().update(instance, validated_data)
        instance.save()
        return instance

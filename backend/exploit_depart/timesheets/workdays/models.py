from django.db import models

from common.data.timesheets import choices
from common.data.timesheets.constraints import messages
from common.services.utils import calculate_timedelta
from employees.models import Employee

Q = models.Q


class WorkDay(models.Model):
    class Meta:
        verbose_name = "Рабочий день"
        constraints = [
            # Employee must not have several workdays with the same date
            models.UniqueConstraint(fields=["date", "employee"], name="unique_workday"),
            # Checks if user populated both work fields (both NULL OR both with times)
            models.CheckConstraint(
                check=(Q(work_started__isnull=False) & Q(work_ended__isnull=False))
                | (Q(work_started__isnull=True) & Q(work_ended__isnull=True)),
                name="work_data_integrity",
                violation_error_message=messages.get("work_data_integrity"),
            ),
            # Checks if user populated both launch fields (both NULL OR both with times)
            models.CheckConstraint(
                check=(Q(launch_started__isnull=False) & Q(launch_ended__isnull=False))
                | (Q(launch_started__isnull=True) & Q(launch_ended__isnull=True)),
                name="launch_data_integrity",
                violation_error_message=messages.get("launch_data_integrity"),
            ),
        ]

    date = models.DateField(verbose_name="Дата", null=False, blank=False)
    employee = models.ForeignKey(
        to=Employee,
        related_name="workdays",
        on_delete=models.CASCADE,
        verbose_name="Работник",
        null=False,
        blank=False,
    )
    day_status = models.CharField(
        max_length=255,
        choices=choices.DAY_STATUS,
        verbose_name="Учёт в табеле",
        null=False,
        blank=False,
    )
    work_started = models.TimeField(
        verbose_name="Начало рабочего дня", null=True, blank=True
    )
    work_ended = models.TimeField(
        verbose_name="Конец рабочего дня", null=True, blank=True
    )
    launch_started = models.TimeField(
        verbose_name="Начало обеденного перерыва", null=True, blank=True
    )
    launch_ended = models.TimeField(
        verbose_name="Конец обеденного перерыва", null=True, blank=True
    )
    launch_duration = models.DurationField(
        verbose_name="Длительность обеденного перерыва", null=True, blank=True
    )
    work_duration = models.DurationField(
        verbose_name="Длительность рабочего времени (с учётом обеденного перерыва)",
        null=True,
        blank=True,
    )

    def save(self, *args, **kwargs):
        self.validate_constraints()

        # Automatic population of work_duration and launch_duration fields
        if self.work_started is None:
            self.work_duration = None
            self.launch_duration = None
        else:
            self.work_duration = calculate_timedelta(self.work_started, self.work_ended)
            if self.launch_started is None:
                self.launch_duration = None
            else:
                self.launch_duration = calculate_timedelta(
                    self.launch_started, self.launch_ended
                )
                self.work_duration -= self.launch_duration
        super().save(*args, **kwargs)

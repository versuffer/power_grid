from rest_framework.exceptions import ValidationError

from common.data.exceptions import default_data
from common.data.timesheets import choices
from common.data.timesheets.validation import messages


class WorkDayValidator:
    def __init__(self, serializer_inst, data):
        self.serializer_inst = serializer_inst
        self.data = data
        self.error_dict = default_data.copy()

    def workday_validation(self):
        self.error_dict["messages"].clear()

        try:
            work_started = self.data["work_started"]
        except KeyError:
            work_started = self.serializer_inst.instance.work_started

        try:
            work_ended = self.data["work_ended"]
        except KeyError:
            work_ended = self.serializer_inst.instance.work_ended

        try:
            launch_started = self.data["launch_started"]
        except KeyError:
            launch_started = self.serializer_inst.instance.launch_started

        try:
            launch_ended = self.data["launch_ended"]
        except KeyError:
            launch_ended = self.serializer_inst.instance.launch_ended

        return self._perform_validation(
            work_started, work_ended, launch_started, launch_ended
        )

    def multiple_workday_validation(self):
        self.error_dict["messages"].clear()
        raise_exc_flag = False

        try:
            work_started = self.data["work_started"]
        except KeyError:
            self.error_dict["messages"].append(messages.get("work_started_not_filled"))
            raise_exc_flag = True
        try:
            work_ended = self.data["work_ended"]
        except KeyError:
            self.error_dict["messages"].append(messages.get("work_ended_not_filled"))
            raise_exc_flag = True
        try:
            launch_started = self.data["launch_started"]
        except KeyError:
            self.error_dict["messages"].append(
                messages.get("launch_started_not_filled")
            )
            raise_exc_flag = True
        try:
            launch_ended = self.data["launch_ended"]
        except KeyError:
            self.error_dict["messages"].append(messages.get("launch_ended_not_filled"))
            raise_exc_flag = True

        if raise_exc_flag:
            raise ValidationError(detail=self.error_dict)

        return self._perform_validation(
            work_started, work_ended, launch_started, launch_ended
        )

    def _perform_validation(
        self, work_started, work_ended, launch_started, launch_ended
    ):
        if self.data.get("day_status") in [
            choices.weekend,
            choices.sickday,
            choices.vacation,
        ]:
            values = [work_started, work_ended, launch_started, launch_ended]
            for value in values:
                if value is not None:
                    self.error_dict["messages"] = [
                        messages.get("if_weekend_filled_properly")
                    ]
                    raise ValidationError(detail=self.error_dict)
            return self.data

        if None in [work_started, work_ended]:
            self.error_dict["messages"] = [messages.get("if_work_period_filled")]
            raise ValidationError(detail=self.error_dict)

        if not work_started < work_ended:
            self.error_dict["messages"] = [messages.get("work_start_before_end")]
            raise ValidationError(detail=self.error_dict)

        if None not in [launch_started, launch_ended]:
            if not work_started < launch_started < launch_ended < work_ended:
                self.error_dict["messages"] = [messages.get("launch_in_work_period")]
                raise ValidationError(detail=self.error_dict)

        return self.data

from datetime import date, datetime

from django.db import models
from employees.models import Employee

from .choices import DAY_STATUS
from .services.timesheet_manager import add_workdays


class WorkDay(models.Model):
    class Meta:
        constraints = [
            models.UniqueConstraint(fields=["date", "employee"], name="unique_workday")
        ]

    date = models.DateField(verbose_name="Дата", null=False, blank=False)
    employee = models.ForeignKey(
        to=Employee,
        related_name="work_days",
        on_delete=models.CASCADE,
        verbose_name="Работник",
        null=False,
        blank=False,
    )
    day_status = models.CharField(
        max_length=255,
        choices=DAY_STATUS,
        verbose_name="Учёт в табеле",
        null=False,
        blank=False,
    )
    work_started = models.TimeField(verbose_name="Начало работы", null=True, blank=True)
    work_ended = models.TimeField(verbose_name="Конец работы", null=True, blank=True)
    launch_started = models.TimeField(
        verbose_name="Начало обеденного перерыва", null=True, blank=True
    )
    launch_ended = models.TimeField(
        verbose_name="Конец обеденного перерыва", null=True, blank=True
    )
    launch_duration = models.DurationField(
        verbose_name="Длительность обеденного перерыва", null=True, blank=True
    )
    work_duration = models.DurationField(
        verbose_name="Длительность рабочего времени (с учётом обеденного перерыва)",
        null=True,
        blank=True,
    )

    @staticmethod
    def _calculate_timedelta(start_time, end_time):
        return datetime.combine(date.min, end_time) - datetime.combine(
            date.min, start_time
        )

    def save(self, *args, **kwargs):
        if None in [
            self.work_started,
            self.work_ended,
            self.launch_started,
            self.launch_ended,
        ]:
            self.launch_duration = None
            self.work_duration = None
        else:
            self.launch_duration = self._calculate_timedelta(
                self.launch_started, self.launch_ended
            )
            self.work_duration = (
                self._calculate_timedelta(self.work_started, self.work_ended)
                - self.launch_duration
            )
        super().save(*args, **kwargs)


class TimeSheet(models.Model):
    timesheet_name = models.CharField(
        max_length=255, unique=True, null=False, blank=False
    )
    employees = models.ManyToManyField(
        to=Employee,
        related_name="timesheets",
        verbose_name="Работник",
        blank=False,
    )
    work_days = models.ManyToManyField(
        to=WorkDay,
        related_name="timesheets",
        verbose_name="Календарные дни",
        blank=True,
    )
    period_start = models.DateField(
        verbose_name="Начало учётного периода", null=False, blank=False
    )
    period_end = models.DateField(
        verbose_name="Конец учётного периода", null=False, blank=False
    )

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        add_workdays(self)

from django.db import models

from common.data.timesheets.constraints import messages
from common.services.workdays_manager import add_workdays
from employees.models import Employee

from .workdays.models import WorkDay

Q = models.Q
F = models.F


class TimeSheet(models.Model):
    class Meta:
        verbose_name = "Taбель"
        constraints = [
            # Checks if user populated both period fields (both with dates)
            models.CheckConstraint(
                check=Q(period_start__isnull=False) & Q(period_end__isnull=False),
                name="period_data_integrity",
                violation_error_message=messages.get("period_data_integrity"),
            ),
            # Checks if period fields populated properly (start time LESSER OF EQUAL end time)
            models.CheckConstraint(
                check=Q(period_start__lte=F("period_end")),
                name="period_start_lte_end",
                violation_error_message=messages.get("period_start_lte_end"),
            ),
        ]

    timesheet_name = models.CharField(
        max_length=255, unique=True, null=False, blank=False
    )
    employees = models.ManyToManyField(
        to=Employee,
        related_name="timesheets",
        verbose_name="Работник",
        blank=False,
    )
    workdays = models.ManyToManyField(
        to=WorkDay,
        related_name="timesheets",
        verbose_name="Календарные дни",
        blank=True,
    )
    period_start = models.DateField(
        verbose_name="Начало учётного периода", null=False, blank=False
    )
    period_end = models.DateField(
        verbose_name="Конец учётного периода", null=False, blank=False
    )

    def save(self, *args, **kwargs):
        self.validate_constraints()
        super().save(*args, **kwargs)
        add_workdays(self)

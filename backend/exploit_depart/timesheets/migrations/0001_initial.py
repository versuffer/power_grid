# Generated by Django 4.1.7 on 2023-04-20 10:15

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("employees", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="WorkDay",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(verbose_name="Дата")),
                (
                    "day_status",
                    models.CharField(
                        choices=[
                            ("раб.", "Рабочий день"),
                            ("вых.", "Выходной"),
                            ("сокр.", "Сокращённый день"),
                            ("бол.", "Больничный"),
                            ("отп.", "Отпуск"),
                        ],
                        max_length=255,
                        verbose_name="Учёт в табеле",
                    ),
                ),
                (
                    "work_started",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Начало рабочего дня"
                    ),
                ),
                (
                    "work_ended",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Конец рабочего дня"
                    ),
                ),
                (
                    "launch_started",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Начало обеденного перерыва"
                    ),
                ),
                (
                    "launch_ended",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Конец обеденного перерыва"
                    ),
                ),
                (
                    "launch_duration",
                    models.DurationField(
                        blank=True,
                        null=True,
                        verbose_name="Длительность обеденного перерыва",
                    ),
                ),
                (
                    "work_duration",
                    models.DurationField(
                        blank=True,
                        null=True,
                        verbose_name="Длительность рабочего времени (с учётом обеденного перерыва)",
                    ),
                ),
                (
                    "employee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="workdays",
                        to="employees.employee",
                        verbose_name="Работник",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TimeSheet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timesheet_name", models.CharField(max_length=255, unique=True)),
                (
                    "period_start",
                    models.DateField(verbose_name="Начало учётного периода"),
                ),
                ("period_end", models.DateField(verbose_name="Конец учётного периода")),
                (
                    "employees",
                    models.ManyToManyField(
                        related_name="timesheets",
                        to="employees.employee",
                        verbose_name="Работник",
                    ),
                ),
                (
                    "workdays",
                    models.ManyToManyField(
                        blank=True,
                        related_name="timesheets",
                        to="timesheets.workday",
                        verbose_name="Календарные дни",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="workday",
            constraint=models.UniqueConstraint(
                fields=("date", "employee"), name="unique_workday"
            ),
        ),
        migrations.AddConstraint(
            model_name="workday",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("work_started__isnull", False), ("work_ended__isnull", False)
                    ),
                    models.Q(
                        ("work_started__isnull", True), ("work_ended__isnull", True)
                    ),
                    _connector="OR",
                ),
                name="work_data_integrity",
                violation_error_message="Не указано время начала или окончания рабочего дня.",
            ),
        ),
        migrations.AddConstraint(
            model_name="workday",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("launch_started__isnull", False),
                        ("launch_ended__isnull", False),
                    ),
                    models.Q(
                        ("launch_started__isnull", True), ("launch_ended__isnull", True)
                    ),
                    _connector="OR",
                ),
                name="launch_data_integrity",
                violation_error_message="Не указано время начала или окончания обеденного перерыва.",
            ),
        ),
        migrations.AddConstraint(
            model_name="workday",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("launch_started__isnull", False),
                        ("work_started__isnull", False),
                    ),
                    ("launch_started__isnull", True),
                    _connector="OR",
                ),
                name="if_launch_then_work",
                violation_error_message="Если указывается время начала и окончания обеденного перерыва, то время начала и окончания рабочего дня также должно быть указано.",
            ),
        ),
        migrations.AddConstraint(
            model_name="workday",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("launch_started__isnull", True),
                    ("launch_started__lt", models.F("launch_ended")),
                    _connector="OR",
                ),
                name="launch_start_before_end",
                violation_error_message="Неверно указано время начала и окончания обеденного перерыва.",
            ),
        ),
        migrations.AddConstraint(
            model_name="workday",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("work_started__isnull", True),
                    ("work_started__lt", models.F("work_ended")),
                    _connector="OR",
                ),
                name="work_start_before_end",
                violation_error_message="Неверно указано время начала и окончания рабочего дня.",
            ),
        ),
        migrations.AddConstraint(
            model_name="workday",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("day_status__in", ["раб.", "сокр."]),
                    models.Q(
                        ("launch_started__isnull", True),
                        ("work_started__isnull", True),
                        ("day_status__in", ["вых.", "бол.", "отп."]),
                    ),
                    _connector="OR",
                ),
                name="if_weekend_filled_properly",
                violation_error_message="Для выходного/больничного/отпуска время начала и окончания обеденного перерыва и время начала и окончания рабочего дня не указывается. Оставьте указанные поля пустыми или поменяйте тип дня на рабочий/сокращённый.",
            ),
        ),
        migrations.AddConstraint(
            model_name="workday",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("day_status__in", ["вых.", "бол.", "отп."]),
                    models.Q(
                        ("day_status__in", ["раб.", "сокр."]),
                        ("work_started__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="if_work_period_filled",
                violation_error_message="Для рабочего/сокращённого дня время начала и окончания рабочего дня указывается обязательно.",
            ),
        ),
        migrations.AddConstraint(
            model_name="workday",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("day_status__in", ["вых.", "бол.", "отп."]),
                    ("launch_started__isnull", True),
                    models.Q(
                        ("work_started__lt", models.F("launch_started")),
                        ("work_ended__gt", models.F("launch_ended")),
                    ),
                    _connector="OR",
                ),
                name="launch_in_work_period",
                violation_error_message="Обеденный перерыв должен проходить в течение рабочего дня (Начало рабочего дня < Начало обеденного перерыва < Конец обеденного перерыва < Конец рабочего дня).",
            ),
        ),
        migrations.AddConstraint(
            model_name="timesheet",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("period_start__isnull", False), ("period_end__isnull", False)
                ),
                name="period_data_integrity",
                violation_error_message="Не указана дата начала или окончания учётного периода.",
            ),
        ),
        migrations.AddConstraint(
            model_name="timesheet",
            constraint=models.CheckConstraint(
                check=models.Q(("period_start__lte", models.F("period_end"))),
                name="period_start_lte_end",
                violation_error_message="Неверно указана дата начала или окончания учётного периода.",
            ),
        ),
    ]

from django.apps import apps
from django.db.models import Q

from common.data.timesheets.choices import (
    default_launch_end,
    default_launch_start,
    default_workday_end,
    default_workday_start,
    defualt_launch_duration,
    defualt_work_duration,
    shortened,
    shortened_verbose,
    shortened_work_duration,
    shortened_workday_end,
    weekend,
    weekend_verbose,
    workday,
    workday_verbose,
)

from .prod_cal_parser import get_prod_calendar_dict


def create_raw_calendar(employee):
    prod_cal_dict = get_prod_calendar_dict()
    workday_list = []
    workday_model = apps.get_model("workdays", "WorkDay")

    workday_obj: workday_model

    for date, day_status in prod_cal_dict.items():
        if day_status == workday_verbose:
            workday_obj = workday_model(
                date=date,
                employee=employee,
                day_status=workday,
                work_started=default_workday_start,
                work_ended=default_workday_end,
                launch_started=default_launch_start,
                launch_ended=default_launch_end,
                work_duration=defualt_work_duration,
                launch_duration=defualt_launch_duration,
            )

        if day_status == weekend_verbose:
            workday_obj = workday_model(
                date=date,
                employee=employee,
                day_status=weekend,
                work_started=None,
                work_ended=None,
                launch_started=None,
                launch_ended=None,
                work_duration=None,
                launch_duration=None,
            )

        if day_status == shortened_verbose:
            workday_obj = workday_model(
                date=date,
                employee=employee,
                day_status=shortened,
                work_started=default_workday_start,
                work_ended=shortened_workday_end,
                launch_started=default_launch_start,
                launch_ended=default_launch_end,
                work_duration=shortened_work_duration,
                launch_duration=defualt_launch_duration,
            )

        workday_list.append(workday_obj)

    workday_model.objects.bulk_create(objs=workday_list, ignore_conflicts=True)


def add_workdays(timesheet):
    workday_model = apps.get_model("workdays", "WorkDay")
    timesheet.workdays.clear()
    timesheet.workdays.add(
        *workday_model.objects.filter(
            Q(employee__in=timesheet.employees.all())
            & Q(date__gte=timesheet.period_start)
            & Q(date__lte=timesheet.period_end)
        )
    )

from django.core.exceptions import NON_FIELD_ERRORS as DJANGO_NON_FIELD_ERRORS
from django.core.exceptions import ValidationError as DjangoValidationError
from rest_framework.exceptions import ValidationError as DRFValidationError
from rest_framework.views import exception_handler


def django_to_drf_exception_handler(exc, context):
    """
    This handler converts standard Django ValidationError to DRF ValidationError
    and passes it to DRF exception_handler()
    """

    if isinstance(exc, DjangoValidationError):
        data = exc.message_dict
        if DJANGO_NON_FIELD_ERRORS in data:
            data[
                "detail"
            ] = "This set of parameters is not valid due to database constraints"
            data["code"] = "db_constraint_violation"
            data["messages"] = data[DJANGO_NON_FIELD_ERRORS]
            del data[DJANGO_NON_FIELD_ERRORS]

        exc = DRFValidationError(detail=data)

    return exception_handler(exc, context)

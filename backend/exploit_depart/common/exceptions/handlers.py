from collections import ChainMap

from django.core.exceptions import NON_FIELD_ERRORS as DJANGO_NON_FIELD_ERRORS
from django.core.exceptions import ValidationError as DjangoValidationError
from django.db import IntegrityError

from rest_framework.exceptions import ValidationError as DRFValidationError
from rest_framework.views import exception_handler

from common.data.employees.constraints import messages as employee_messages
from common.data.timesheets.constraints import messages as timesheet_messages

messages = ChainMap(employee_messages, timesheet_messages)


def custom_exception_handler(exc, context):
    """
    This handler converts standard Django ValidationError and IntegrityError
    to DRF ValidationError and passes it to DRF exception_handler()
    """

    default_data = {
        "detail": "This set of parameters is not valid due to database constraints",
        "code": "db_constraint_violation",
    }

    if isinstance(exc, IntegrityError):
        data = {"error": "IntegrityError"}
        data.update(default_data)
        try:
            constraint_name = exc.args[0].split()[-1]
            data["messages"] = [messages[constraint_name]]
        except IndexError:
            data["messages"] = ["Unexpected data integrity error."]

        exc = DRFValidationError(detail=data)

    if isinstance(exc, DjangoValidationError):
        data = exc.message_dict
        data.update({"error": "ValidationError"})

        if DJANGO_NON_FIELD_ERRORS in data:
            data.update(default_data)
            data["messages"] = data[DJANGO_NON_FIELD_ERRORS]
            del data[DJANGO_NON_FIELD_ERRORS]

        exc = DRFValidationError(detail=data)

    return exception_handler(exc, context)

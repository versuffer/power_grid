from django.db import IntegrityError, transaction

from rest_framework import status
from rest_framework.decorators import action
from rest_framework.exceptions import ValidationError
from rest_framework.response import Response

from common.data.mixins import messages
from common.serialization.validation.mixins import ValidatorMixin


class MultiSerializerMixin:
    def get_serializer_class(self):
        serializer = self.serializer_action_classes.get(self.action)
        if serializer:
            return serializer

        return super().get_serializer_class()


class MultipleUpdateModelMixin(MultiSerializerMixin):
    @staticmethod
    def _get_pk_list(request):
        # Basic validation
        error_dict = ValidatorMixin.get_default_error_dict()
        error_dict["messages"].clear()
        try:
            pk_list = request.data["pk_list"]
        except KeyError:
            error_dict["messages"].append(messages.get("pk_list_not_found"))
            raise ValidationError(detail=error_dict)

        if not isinstance(pk_list, list):
            error_dict["messages"].append(messages.get("pk_list_wrong_format"))
            raise ValidationError(detail=error_dict)

        if len(pk_list) == 0:
            error_dict["messages"].append(messages.get("pk_list_is_empty"))
            raise ValidationError(detail=error_dict)

        return pk_list

    def _get_update_queryset(self, pk_list: list):
        return self.get_queryset().filter(pk__in=pk_list)

    @staticmethod
    def perform_multiple_update(update_queryset, data):
        try:
            update_queryset.update(**data)
            for obj in update_queryset:
                obj.save()
        except IntegrityError as exc:
            transaction.rollback()
            raise exc

    @action(methods=["patch"], detail=False, url_path="update")
    def multiple_update(self, request, **kwargs):
        partial = kwargs.pop("partial", False)

        pk_list = self._get_pk_list(request=request)
        update_queryset = self._get_update_queryset(pk_list=pk_list)

        serializer = self.get_serializer(data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)

        data = serializer.data.copy()
        del data["pk_list"]

        self.perform_multiple_update(update_queryset, data)

        changed_list = [obj.pk for obj in update_queryset]

        return Response(
            data={
                "changed_count": len(update_queryset),
                "changed_objects": changed_list,
            },
            status=status.HTTP_200_OK,
        )

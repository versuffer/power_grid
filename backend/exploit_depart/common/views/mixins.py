from django.db import IntegrityError, transaction

from rest_framework.decorators import action
from rest_framework.response import Response


class MultiSerializerMixin:
    def get_serializer_class(self):
        serializer = self.serializer_action_classes.get(self.action)
        if serializer:
            return serializer

        return super().get_serializer_class()


class MultipleUpdateModelMixin:
    def _get_update_queryset(self, pk_list: list):
        return self.get_queryset().filter(pk__in=pk_list)

    @action(methods=["put", "patch"], detail=False, url_path="update")
    def multiple_update(self, request, *args, **kwargs):
        partial = kwargs.pop("partial", False)
        update_queryset = self._get_update_queryset(pk_list=request.data["pk_list"])
        serializer = self.get_serializer(data=request.data, partial=partial)
        serializer.is_valid(raise_exception=True)

        param_dict = serializer.data.copy()
        del param_dict["pk_list"]

        self.perform_multiple_update(update_queryset, param_dict)

        changed_list = [obj.pk for obj in update_queryset]

        return Response(
            {"changed_count": len(update_queryset), "changed_objects": changed_list}
        )

    @staticmethod
    def perform_multiple_update(update_queryset, param_dict):
        try:
            update_queryset.update(**param_dict)
            for obj in update_queryset:
                obj.save()
        except IntegrityError as exc:
            transaction.rollback()
            raise exc
